name: Auto-Version Release

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'README.md'
      - '.github/WORKFLOWS.md'
      - '.github/VERSION-DETECTION.md'
      - 'LICENSE'
      - '*.md'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release (auto-detects from commits if not specified)'
        required: false
        default: 'auto'
        type: choice
        options:
        - auto
        - patch
        - minor
        - major

jobs:
  check_for_release:
    name: Check if Release Needed
    runs-on: ubuntu-24.04-arm
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      version_type: ${{ steps.check.outputs.version_type }}
      new_version: ${{ steps.check.outputs.new_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for release triggers
        id: check
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Get commits since last tag
          COMMITS_SINCE_TAG=$(git rev-list ${LATEST_TAG}..HEAD --count)
          echo "Commits since last tag: $COMMITS_SINCE_TAG"
          
          # If no new commits, don't release
          if [ "$COMMITS_SINCE_TAG" -eq 0 ]; then
            echo "No new commits since last tag"
            echo "should_release=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Get branch names that were merged since last tag
          MERGED_BRANCHES=$(git log ${LATEST_TAG}..HEAD --merges --pretty=format:"%s" | grep -o "from [^']*" | sed 's/from //' || echo "")
          echo "Merged branches since last tag:"
          echo "$MERGED_BRANCHES"
          
          # Also check commit messages for manual detection
          COMMIT_MESSAGES=$(git log ${LATEST_TAG}..HEAD --pretty=format:"%s" --max-count=50)
          if [ $? -ne 0 ]; then
            echo "Error: Failed to retrieve commit messages for range ${LATEST_TAG}..HEAD" >&2
            exit 1
          fi
          echo "Commit messages:"
          echo "$COMMIT_MESSAGES"
          
          # Skip release for dependency and docs updates
          if echo "$MERGED_BRANCHES" | grep -iE "^dep|^dependabot|^docs|/dep|/docs"; then
            echo "Skipping release for dependency/docs updates"
            echo "should_release=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          if echo "$COMMIT_MESSAGES" | grep -i "^dep:\|^docs:\|^dependencies:\|^dependency:"; then
            echo "Skipping release for dependency/docs commits"
            echo "should_release=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Determine version type
          VERSION_TYPE="${{ github.event.inputs.release_type }}"
          if [ "$VERSION_TYPE" = "auto" ] || [ -z "$VERSION_TYPE" ]; then
            # Check for feat branches first (minor version bump - Y)
            if echo "$MERGED_BRANCHES" | grep -iE "^feat|/feat"; then
              VERSION_TYPE="minor"
            # Check for feat in commit messages as fallback
            elif echo "$COMMIT_MESSAGES" | grep -i "^feat\|feat:"; then
              VERSION_TYPE="minor"
            # Everything else is patch (Z)
            else
              VERSION_TYPE="patch"
            fi
          fi
          
          echo "Detected version type: $VERSION_TYPE"
          
          # Calculate new version
          CURRENT_VERSION=${LATEST_TAG#v}
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          case $VERSION_TYPE in
            major)
              NEW_VERSION="v$((MAJOR + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="v${MAJOR}.$((MINOR + 1)).0"
              ;;
            patch)
              NEW_VERSION="v${MAJOR}.${MINOR}.$((PATCH + 1))"
              ;;
          esac
          
          echo "New version: $NEW_VERSION"
          
          # Set outputs
          echo "should_release=true" >> $GITHUB_OUTPUT
          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

  create_release:
    name: Create Automated Release
    needs: check_for_release
    if: needs.check_for_release.outputs.should_release == 'true'
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update version in action.yml
        run: |
          VERSION="${{ needs.check_for_release.outputs.new_version }}"
          sed -i "s|image: docker://devopsinfra/action-commit-push:.*|image: docker://devopsinfra/action-commit-push:${VERSION}|" action.yml
          echo "‚úÖ Updated action.yml to use version: ${VERSION}"

      - name: Update version in Makefile
        run: |
          VERSION="${{ needs.check_for_release.outputs.new_version }}"
          sed -i "s|echo \"v[0-9]\+\.[0-9]\+\.[0-9]\+\"|echo \"${VERSION}\"|" Makefile
          echo "‚úÖ Updated Makefile fallback version to: ${VERSION}"

      - name: Create release branch and commit changes
        uses: devops-infra/action-commit-push@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          target_branch: release/${{ needs.check_for_release.outputs.new_version }}
          commit_message: |
            ü§ñ Fully Automated Release ${{ needs.check_for_release.outputs.new_version }}
            
            This release was **automatically created** and requires **no manual intervention**.
            
            üìä Release Details
            - **Version**: `${{ needs.check_for_release.outputs.new_version }}`
            - **Type**: `${{ needs.check_for_release.outputs.version_type }}` (auto-detected)
            - **Trigger**: `${{ github.event_name }}`
            - **Actor**: @${{ github.actor }}
            - **Date**: $(date +'%Y-%m-%d %H:%M:%S UTC')
            
            üîÑ Automated Changes
            - ‚úÖ Updated `action.yml` Docker image reference
            - ‚úÖ Updated `Makefile` fallback version
            - ‚úÖ Version auto-detected from commit messages
            
            üöÄ What happens when merged?
            1. üê≥ Multi-architecture Docker images built and pushed
            2. üè∑Ô∏è GitHub release created with auto-generated notes
            3. üìù Docker Hub description updated
            4. üßπ Release branch automatically cleaned up
            
            üîç Version Detection Logic
            - `major`: Manual releases only (v0.10.2 ‚Üí v1.0.0)
            - `minor`: Merges from feat* branches or feat: in commits (v0.10.2 ‚Üí v0.11.0)
            - `patch`: All other changes (v0.10.2 ‚Üí v0.10.3)
            
            **This PR is safe to auto-merge - it only contains version updates.**
            
            ---
            *ü§ñ Fully automated release - zero manual intervention required!*
